#include <stdio.h>
#include <stdlib.h>
int size;
struct queue
{
    int front, rear, count;
    int *q;
} Q;

void display()
{
    if (Q.count == 0)
    {
        printf("\nQueue is empty");
        return;
    }
    int i = Q.front - 1;
    printf("\nQueue elements: ");
    do
    {
        i = (i + 1) % size;
        printf("%d\t", Q.q[i]);
    } while (i != Q.rear);
}

int priorityCheck(int ele)
{
    int i = 0;
    while (Q.q[i] < ele && i <= Q.rear)
    {
        i++;
    }
    return i;
}
void insert()
{
    int ele, pos, i;
    printf("\nEnter the element to be inserted: ");
    scanf("%d", &ele);
    if (Q.count == size)
    {
        printf("\nReallocationg memory\n");
        size++;
        Q.q = (int *)realloc(Q.q, size * sizeof(int));
    }
    if (Q.count == 0)
    {
        Q.front = Q.rear = 0;
        Q.q[Q.rear] = ele;
        Q.count++;
        display();
        return;
    }
    pos = priorityCheck(ele);
    Q.rear++;
    for (i = Q.rear; i > pos; i--)
    {
        Q.q[i] = Q.q[i - 1];
    }
    Q.q[pos] = ele;
    Q.count++;
    display();
}

void delete()
{
    if (Q.count == 0)
    {
        printf("\nQueue is empty");
        return;
    }
    printf("Deleted element: %d", Q.q[Q.front]);
    Q.front++;
    Q.count--;
    display();
}
int main()
{
    int ch;
    Q.count = 0;
    Q.front = Q.rear = -1;
    printf("Enter the size: ");
    scanf("%d", &size);
    Q.q = (int *)malloc(size * sizeof(int));
    do
    {
        printf("\nMENU:\n1.Insert\n2.deleted\n3.Display\n0.Exit\nEnter your choice: ");
        scanf("%d", &ch);

        switch (ch)
        {
        case 1:
            insert();
            break;
        case 2:
            delete ();
            break;
        case 3:
            display();
            break;
        case 0:
            printf("\nThank you!!");
            break;

        default:
            printf("\nInvalid choice");
        }
    } while (ch != 0);

    return 0;
}
