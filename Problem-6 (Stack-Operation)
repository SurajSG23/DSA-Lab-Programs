//Program to covert infix to prefix/postfix and evaluate that expression
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <ctype.h>
#define MAX_SIZE 20
typedef struct
{
    int top;
    char items[MAX_SIZE];
} STACK;

void push(STACK *stack, char c)
{
    stack->items[++stack->top] = c;
}

char pop(STACK *stack)
{
    return stack->items[stack->top--];
}

int precedence(char c)
{
    switch (c)
    {
    case '+':
    case '-':
        return 1;
    case '*':
    case '/':
    case '%':
        return 2;
    case '^':
    case '$':
        return 3;
    case '(':
    case ')':
        return 0;
    }
}

char associativity(char c)
{
    if (c == '^' || c == '$')
        return 'R';
    return 'L';
}

double compute(double op1, double op2, char c)
{
    switch (c)
    {
    case '+':
        return op1 + op2;
    case '-':
        return op1 - op2;
    case '*':
        return op1 * op2;
    case '/':
        return op1 / op2;
    case '$':
    case '^':
        return pow(op1, op2);
    default:
        return 0.0;
    }
}

void infixToPostfix(char *infix, char *postfix)
{
    STACK stack;
    stack.top = -1;
    printf("\nEnter the infix expression: ");
    scanf("%s", infix);
    int j = 0;
    for (int i = 0; i < strlen(infix); i++)
    {
        char c = infix[i];
        if (isalnum(c))
        {
            postfix[j++] = c;
        }
        else if (c == '(')
        {
            push(&stack, c);
        }
        else if (c == ')')
        {
            while (stack.items[stack.top] != '(')
            {
                postfix[j++] = pop(&stack);
            }
            pop(&stack);
        }
        else
        {
            while (precedence(stack.items[stack.top]) > precedence(c) || (precedence(stack.items[stack.top]) == precedence(c) && associativity(c) == 'L'))
            {
                postfix[j++] = pop(&stack);
            }
            push(&stack, c);
        }
    }
    while (stack.top != -1)
    {
        postfix[j++] = pop(&stack);
    }
    postfix[j] = '\0';
    printf("\nPostfix expression: %s", postfix);
}

void reverse(char *infix)
{
    int i;
    int j;
    char temp;
    for (i = 0, j = strlen(infix) - 1; i < j; i++, j--)
    {
        temp = infix[i];
        infix[i] = infix[j];
        infix[j] = temp;
    }
}

void infixToPrefix(char *infix, char *prefix)
{
    STACK stack;
    stack.top = -1;
    printf("\nEnter the infix expression: ");
    scanf("%s", infix);
    reverse(infix);
    int j = 0;
    for (int i = 0; i < strlen(infix); i++)
    {
        char c = infix[i];
        if (isalnum(c))
        {
            prefix[j++] = c;
        }
        else if (c == ')')
        {
            push(&stack, c);
        }
        else if (c == '(')
        {
            while (stack.items[stack.top] != ')')
            {
                prefix[j++] = pop(&stack);
            }
            pop(&stack);
        }
        else
        {
            while (precedence(stack.items[stack.top]) > precedence(c) || (precedence(stack.items[stack.top]) == precedence(c) && associativity(c) == 'R'))
            {
                prefix[j++] = pop(&stack);
            }
            push(&stack, c);
        }
    }
    while (stack.top != -1)
    {
        prefix[j++] = pop(&stack);
    }
    prefix[j] = '\0';
    reverse(prefix);
    printf("\nPrefix expression: %s", prefix);
}

void evaluatePostfix(char *postfix)
{
    STACK stack;
    stack.top = -1;
    double result, op1, op2;
    char symbol;
    for (int i = 0; i < strlen(postfix); i++)
    {
        symbol = postfix[i];
        if (isdigit(symbol))
        {
            stack.items[++stack.top] = symbol - '0';
        }
        else
        {
            op2 = stack.items[stack.top--];
            op1 = stack.items[stack.top--];
            result = compute(op1, op2, symbol);
            stack.items[++stack.top] = result;
        }
    }
    result = stack.items[stack.top--];
    printf("\nResult: %.2lf\n", result);
}

void evaluatePrefix(char *prefix)
{
    STACK stack;
    stack.top = -1;
    double result, op1, op2;
    char symbol;
    for (int i = strlen(prefix)-1; i >= 0; i--)
    {
        symbol = prefix[i];
        if (isdigit(symbol))
        {
            stack.items[++stack.top] = symbol - '0';
        }
        else
        {
            op1 = stack.items[stack.top--];
            op2 = stack.items[stack.top--];
            result = compute(op1, op2, symbol);
            stack.items[++stack.top] = result;
        }
    }
    result = stack.items[stack.top--];
    printf("\nResult: %.2lf\n", result);
}
int main()
{
    int ch;
    char infix[MAX_SIZE], postfix[MAX_SIZE], prefix[MAX_SIZE];
    do
    {
        printf("\nMENU:\n1.Infix to postfix\n2.Evaluate postfix\n3.Infix to prefix\n4.Evaluate prefix\n0.Exit\nEnter your choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            infixToPostfix(infix, postfix);
            break;
        case 2:
            evaluatePostfix(postfix);
            break;
        case 3:
            infixToPrefix(infix, prefix);
            break;
        case 4:
            evaluatePrefix(prefix);
            break;
        case 0:
            printf("\nThank YOU!!");
            break;
        default:
            printf("\nInvalid choice");
        }

    } while (ch != 0);

    return 0;
}
